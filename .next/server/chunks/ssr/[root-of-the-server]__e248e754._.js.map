{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [\n    googleAI({\n      apiKey: process.env.GOOGLE_API_KEY,\n    }),\n  ],\n  logLevel: 'debug',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ,QAAQ,GAAG,CAAC,cAAc;QACpC;KACD;IACD,UAAU;AACZ","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/image-to-pdf-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A flow for converting multiple images into a single PDF document.\n *\n * - imageToPdf - A function that handles the image to PDF conversion process.\n * - ImageToPdfInput - The input type for the function.\n * - ImageToPdfOutput - The return type for the function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\nimport {PDFDocument, PDFImage} from 'pdf-lib';\n\nconst ImageToPdfInputSchema = z.object({\n  imageDataUris: z\n    .array(z.string())\n    .describe(\n      \"An array of image files as data URIs. Each must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'\"\n    ),\n});\nexport type ImageToPdfInput = z.infer<typeof ImageToPdfInputSchema>;\n\nconst ImageToPdfOutputSchema = z.object({\n  pdfDataUri: z\n    .string()\n    .describe('The generated PDF file as a data URI.'),\n});\nexport type ImageToPdfOutput = z.infer<typeof ImageToPdfOutputSchema>;\n\nexport async function imageToPdf(\n  input: ImageToPdfInput\n): Promise<ImageToPdfOutput> {\n  return imageToPdfFlow(input);\n}\n\nconst imageToPdfFlow = ai.defineFlow(\n  {\n    name: 'imageToPdfFlow',\n    inputSchema: ImageToPdfInputSchema,\n    outputSchema: ImageToPdfOutputSchema,\n  },\n  async ({imageDataUris}) => {\n    if (imageDataUris.length === 0) {\n      throw new Error('No image files provided to convert.');\n    }\n\n    const pdfDoc = await PDFDocument.create();\n\n    for (const dataUri of imageDataUris) {\n        const imageBytes = Buffer.from(dataUri.split(',')[1], 'base64');\n        let pdfImage: PDFImage;\n\n        if (dataUri.startsWith('data:image/jpeg') || dataUri.startsWith('data:image/jpg')) {\n            pdfImage = await pdfDoc.embedJpg(imageBytes);\n        } else if (dataUri.startsWith('data:image/png')) {\n            pdfImage = await pdfDoc.embedPng(imageBytes);\n        } else {\n            // Skip unsupported image formats for now. \n            // In a real app, you might want to handle this more gracefully.\n            console.warn(`Skipping unsupported image type for data URI: ${dataUri.substring(0, 30)}...`);\n            continue;\n        }\n\n        const page = pdfDoc.addPage([pdfImage.width, pdfImage.height]);\n        page.drawImage(pdfImage, {\n            x: 0,\n            y: 0,\n            width: pdfImage.width,\n            height: pdfImage.height,\n        });\n    }\n\n    const pdfBytes = await pdfDoc.save();\n    const pdfBase64 = Buffer.from(pdfBytes).toString('base64');\n\n    return {\n      pdfDataUri: `data:application/pdf;base64,${pdfBase64}`,\n    };\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AAAA;;;;;;;AAEA,MAAM,wBAAwB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,eAAe,uIAAA,CAAA,IAAC,CACb,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CACP;AAEN;AAGA,MAAM,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,YAAY,uIAAA,CAAA,IAAC,CACV,MAAM,GACN,QAAQ,CAAC;AACd;AAGO,eAAe,WACpB,KAAsB;IAEtB,OAAO,eAAe;AACxB;AAEA,MAAM,iBAAiB,mHAAA,CAAA,KAAE,CAAC,UAAU,CAClC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO,EAAC,aAAa,EAAC;IACpB,IAAI,cAAc,MAAM,KAAK,GAAG;QAC9B,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,SAAS,MAAM,gMAAA,CAAA,cAAW,CAAC,MAAM;IAEvC,KAAK,MAAM,WAAW,cAAe;QACjC,MAAM,aAAa,OAAO,IAAI,CAAC,QAAQ,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE;QACtD,IAAI;QAEJ,IAAI,QAAQ,UAAU,CAAC,sBAAsB,QAAQ,UAAU,CAAC,mBAAmB;YAC/E,WAAW,MAAM,OAAO,QAAQ,CAAC;QACrC,OAAO,IAAI,QAAQ,UAAU,CAAC,mBAAmB;YAC7C,WAAW,MAAM,OAAO,QAAQ,CAAC;QACrC,OAAO;YACH,2CAA2C;YAC3C,gEAAgE;YAChE,QAAQ,IAAI,CAAC,CAAC,8CAA8C,EAAE,QAAQ,SAAS,CAAC,GAAG,IAAI,GAAG,CAAC;YAC3F;QACJ;QAEA,MAAM,OAAO,OAAO,OAAO,CAAC;YAAC,SAAS,KAAK;YAAE,SAAS,MAAM;SAAC;QAC7D,KAAK,SAAS,CAAC,UAAU;YACrB,GAAG;YACH,GAAG;YACH,OAAO,SAAS,KAAK;YACrB,QAAQ,SAAS,MAAM;QAC3B;IACJ;IAEA,MAAM,WAAW,MAAM,OAAO,IAAI;IAClC,MAAM,YAAY,OAAO,IAAI,CAAC,UAAU,QAAQ,CAAC;IAEjD,OAAO;QACL,YAAY,CAAC,4BAA4B,EAAE,WAAW;IACxD;AACF;;;IAjDoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/image-to-pdf/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {imageToPdf as '40f24016ea303258f56732dc409dd7d4a17ebd3af9'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 363, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/image-to-pdf/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/image-to-pdf/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/image-to-pdf/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiS,GAC9T,+DACA","debugId":null}},
    {"offset": {"line": 377, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/image-to-pdf/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/image-to-pdf/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/image-to-pdf/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6Q,GAC1S,2CACA","debugId":null}},
    {"offset": {"line": 391, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}