{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [\n    googleAI({\n      model: 'gemini-2.5-flash-preview',\n    }),\n  ],\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,OAAO;QACT;KACD;AACH","debugId":null}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/config.ts"],"sourcesContent":["// src/config.ts\n\n/**\n * The maximum file size in megabytes (MB) allowed for uploads.\n * This limit is enforced on the client-side before uploading\n * and on the server-side upon receiving the file.\n * NOTE: Vercel Hobby plan has a 4.5MB body size limit for Serverless Functions.\n * Base64 encoding adds ~37% overhead. To stay safely under 4.5MB,\n * we set the raw file limit to 3MB (3MB * 1.37 â‰ˆ 4.11MB).\n * The user has requested to increase this to 8MB. This may cause issues on\n * hosting platforms with smaller limits.\n */\nexport const MAX_FILE_SIZE_MB = 8;\n\n/**\n * The maximum file size in bytes.\n * Derived from MAX_FILE_SIZE_MB.\n */\nexport const MAX_FILE_SIZE_BYTES = MAX_FILE_SIZE_MB * 1024 * 1024;\n\n/**\n * The maximum size for a base64-encoded string, accounting for the ~37% overhead.\n * This is used for server-side validation in Genkit flows.\n */\nexport const MAX_BASE64_SIZE_BYTES = MAX_FILE_SIZE_BYTES * 1.37;\n"],"names":[],"mappings":"AAAA,gBAAgB;AAEhB;;;;;;;;;CASC;;;;;AACM,MAAM,mBAAmB;AAMzB,MAAM,sBAAsB,mBAAmB,OAAO;AAMtD,MAAM,wBAAwB,sBAAsB","debugId":null}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/pdf-transcript-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview An AI agent for transcribing text from PDF files.\n *\n * - transcribePdf - A function that handles the PDF to text transcription process.\n * - TranscribePdfInput - The input type for the function.\n * - TranscribePdfOutput - The return type for the function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {googleAI} from '@genkit-ai/googleai';\nimport {z} from 'genkit';\nimport { MAX_BASE64_SIZE_BYTES } from '@/config';\n\nconst TranscribePdfInputSchema = z.object({\n  pdfDataUri: z\n    .string()\n    .describe(\n      \"A PDF file, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:application/pdf;base64,<encoded_data>'\"\n    ),\n});\nexport type TranscribePdfInput = z.infer<typeof TranscribePdfInputSchema>;\n\nconst TranscribePdfOutputSchema = z.object({\n  text: z.string().describe('The transcribed text from the PDF.'),\n});\nexport type TranscribePdfOutput = z.infer<typeof TranscribePdfOutputSchema>;\n\nexport async function transcribePdf(\n  input: TranscribePdfInput\n): Promise<TranscribePdfOutput> {\n  return pdfTranscriptFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'pdfTranscriptPrompt',\n  model: googleAI.model('gemini-2.5-flash-preview'),\n  input: {schema: TranscribePdfInputSchema},\n  output: {schema: TranscribePdfOutputSchema},\n  prompt: `You are a meticulous digital archivist. Your one and only mission is to extract the text from the provided PDF document and replicate its layout and structure with perfect fidelity. Any deviation is a failure.\n\nYou MUST adhere to the following rules without exception:\n- **Structural Integrity:** Your primary goal is to maintain the original layout. This includes preserving columns, tables, headers, footers, and any other structural elements.\n- **Spacing is Crucial:** Replicate all whitespace, indentation, and alignment exactly as it appears in the original document. Use spaces to align text in columns and tables.\n- **Preserve All Breaks:** Every paragraph break and line break must be maintained. Do not merge lines or paragraphs.\n- **No Commentary:** Do NOT add any extra text, explanations, summaries, or apologies. Your output must ONLY be the text content from the PDF.\n- **Formatting:** While you cannot replicate fonts or colors, you should represent formatting like bold or italics using markdown if possible (e.g., **bold text**, *italic text*).\n\nYour output will be a direct, text-based mirror of the document provided. Begin extraction now.\n\nPDF File: {{media url=pdfDataUri}}`,\n});\n\nconst pdfTranscriptFlow = ai.defineFlow(\n  {\n    name: 'pdfTranscriptFlow',\n    inputSchema: TranscribePdfInputSchema,\n    outputSchema: TranscribePdfOutputSchema,\n  },\n  async input => {\n    if (input.pdfDataUri.length > MAX_BASE64_SIZE_BYTES) {\n        throw new Error('413: Payload Too Large. PDF file size exceeds the server limit.');\n    }\n    const {output} = await prompt(input);\n    if (!output) {\n      throw new Error(\n        'PDF to Text transcription failed: The model did not return any output.'\n      );\n    }\n    return output;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;AAEA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,YAAY,uIAAA,CAAA,IAAC,CACV,MAAM,GACN,QAAQ,CACP;AAEN;AAGA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5B;AAGO,eAAe,cACpB,KAAyB;IAEzB,OAAO,kBAAkB;AAC3B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO,2KAAA,CAAA,WAAQ,CAAC,KAAK,CAAC;IACtB,OAAO;QAAC,QAAQ;IAAwB;IACxC,QAAQ;QAAC,QAAQ;IAAyB;IAC1C,QAAQ,CAAC;;;;;;;;;;;kCAWuB,CAAC;AACnC;AAEA,MAAM,oBAAoB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACrC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,IAAI,MAAM,UAAU,CAAC,MAAM,GAAG,6GAAA,CAAA,wBAAqB,EAAE;QACjD,MAAM,IAAI,MAAM;IACpB;IACA,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MACR;IAEJ;IACA,OAAO;AACT;;;IA1CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/pdf-transcript/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {transcribePdf as '404e7f9a1b53c619250992f00f30e177053aa089a2'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 385, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/pdf-transcript/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/pdf-transcript/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/pdf-transcript/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmS,GAChU,iEACA","debugId":null}},
    {"offset": {"line": 399, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/pdf-transcript/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/pdf-transcript/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/pdf-transcript/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+Q,GAC5S,6CACA","debugId":null}},
    {"offset": {"line": 413, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}