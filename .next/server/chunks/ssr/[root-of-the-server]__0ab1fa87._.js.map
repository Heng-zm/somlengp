{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/translate-text-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A text translation AI agent.\n *\n * - translateText - A function that handles text translation.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst TranslateTextInputSchema = z.object({\n  text: z.string().describe('The text to translate.'),\n  targetLanguage: z.string().describe('The language to translate the text into (e.g., \"Spanish\", \"French\", \"Japanese\").'),\n});\ntype TranslateTextInput = z.infer<typeof TranslateTextInputSchema>;\n\nconst TranslateTextOutputSchema = z.object({\n  translatedText: z.string().describe('The translated text.'),\n});\ntype TranslateTextOutput = z.infer<typeof TranslateTextOutputSchema>;\n\nexport async function translateText(input: TranslateTextInput): Promise<TranslateTextOutput> {\n  return translateTextFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'translateTextPrompt',\n  input: {schema: TranslateTextInputSchema},\n  output: {schema: TranslateTextOutputSchema},\n  prompt: `Translate the following text into {{targetLanguage}}.\\n\\nText:\\n{{text}}`,\n});\n\nconst translateTextFlow = ai.defineFlow(\n  {\n    name: 'translateTextFlow',\n    inputSchema: TranslateTextInputSchema,\n    outputSchema: TranslateTextOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;CAIC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC;AAGA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC;AAGO,eAAe,cAAc,KAAyB;IAC3D,OAAO,kBAAkB;AAC3B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAwB;IACxC,QAAQ;QAAC,QAAQ;IAAyB;IAC1C,QAAQ,CAAC,wEAAwE,CAAC;AACpF;AAEA,MAAM,oBAAoB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACrC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IApBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/speech-to-text-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A speech-to-text transcription AI agent.\n *\n * - transcribeAudio - A function that handles audio transcription.\n * - TranscribeAudioInput - The input type for the transcribeAudio function.\n * - TranscribeAudioOutput - The return type for the transcribeAudio function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\nimport {TranscriptWord} from '@/lib/types';\n\nconst TranscribeAudioInputSchema = z.object({\n  audioDataUri: z\n    .string()\n    .describe(\n      \"A recording of spoken audio, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type TranscribeAudioInput = z.infer<typeof TranscribeAudioInputSchema>;\n\nconst TranscriptWordSchema = z.object({\n  text: z.string(),\n  start: z.number().describe('Start time of the word in seconds.'),\n  end: z.number().describe('End time of the word in seconds.'),\n});\n\nconst TranscribeAudioOutputSchema = z.object({\n  transcript: z.array(TranscriptWordSchema).describe('The structured transcript with word timings.'),\n  text: z.string().describe('The full transcribed text as a single string.'),\n});\nexport type TranscribeAudioOutput = z.infer<typeof TranscribeAudioOutputSchema>;\n\n\nexport async function transcribeAudio(input: TranscribeAudioInput): Promise<TranscribeAudioOutput> {\n  return transcribeAudioFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'transcribeAudioPrompt',\n  input: {schema: TranscribeAudioInputSchema},\n  output: {schema: TranscribeAudioOutputSchema},\n  prompt: `Transcribe the following audio. Provide the full text and a structured transcript with word-level timestamps.\n\nAudio: {{media url=audioDataUri}}`,\n  model: 'googleai/gemini-2.0-flash',\n});\n\nconst transcribeAudioFlow = ai.defineFlow(\n  {\n    name: 'transcribeAudioFlow',\n    inputSchema: TranscribeAudioInputSchema,\n    outputSchema: TranscribeAudioOutputSchema,\n  },\n  async (input) => {\n    const {output} = await prompt(input);\n    if (!output) {\n      throw new Error('Transcription failed: The model did not return any output.');\n    }\n    \n    // Post-process to ensure start and end times are numbers.\n    const processedTranscript = output.transcript.map(word => ({\n        ...word,\n        start: Number(word.start) || 0,\n        end: Number(word.end) || 0,\n    }));\n\n    return {\n        transcript: processedTranscript,\n        text: output.text,\n    };\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAGA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;AAEN;AAGA,MAAM,uBAAuB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM;IACd,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC3B;AAEA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,YAAY,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,sBAAsB,QAAQ,CAAC;IACnD,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5B;AAIO,eAAe,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA0B;IAC1C,QAAQ;QAAC,QAAQ;IAA2B;IAC5C,QAAQ,CAAC;;iCAEsB,CAAC;IAChC,OAAO;AACT;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IAEA,0DAA0D;IAC1D,MAAM,sBAAsB,OAAO,UAAU,CAAC,GAAG,CAAC,CAAA,OAAQ,CAAC;YACvD,GAAG,IAAI;YACP,OAAO,OAAO,KAAK,KAAK,KAAK;YAC7B,KAAK,OAAO,KAAK,GAAG,KAAK;QAC7B,CAAC;IAED,OAAO;QACH,YAAY;QACZ,MAAM,OAAO,IAAI;IACrB;AACF;;;IArCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 362, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {translateText as '405af0fc3230539b7c1572f6b50dd0d3625a304e26'} from 'ACTIONS_MODULE0'\nexport {transcribeAudio as '4021eec7f36ae423a90a123d847a05761fe9cb9e78'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 420, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/voice-scribe-page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const VoiceScribePage = registerClientReference(\n    function() { throw new Error(\"Attempted to call VoiceScribePage() from the server but VoiceScribePage is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/voice-scribe-page.tsx <module evaluation>\",\n    \"VoiceScribePage\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,kBAAkB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,sEACA","debugId":null}},
    {"offset": {"line": 434, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/voice-scribe-page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const VoiceScribePage = registerClientReference(\n    function() { throw new Error(\"Attempted to call VoiceScribePage() from the server but VoiceScribePage is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/voice-scribe-page.tsx\",\n    \"VoiceScribePage\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,kBAAkB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,kDACA","debugId":null}},
    {"offset": {"line": 448, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 458, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["import { VoiceScribePage } from '@/components/voice-scribe-page';\n\nexport default function Home() {\n  return <VoiceScribePage />;\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBAAO,8OAAC,6IAAA,CAAA,kBAAe;;;;;AACzB","debugId":null}}]
}