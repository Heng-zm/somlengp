{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/visit/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\n// This is an in-memory counter. It will reset whenever the server instance restarts.\n// In a serverless environment, this means the count is not persistent or shared\n// across different instances. It's used here only to provide a base number\n// for the client-side counting logic.\nlet visitorCount = 0; \n\nexport async function GET() {\n    try {\n        // The count is not incremented here. The GET endpoint's only job is to\n        // provide a starting number to new clients.\n        return NextResponse.json({ success: true, count: visitorCount });\n    } catch (error) {\n        console.error('Error fetching visitor count:', error);\n        return NextResponse.json(\n            { success: false, message: 'An internal error occurred.' },\n            { status: 500 }\n        );\n    }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,qFAAqF;AACrF,gFAAgF;AAChF,2EAA2E;AAC3E,sCAAsC;AACtC,IAAI,eAAe;AAEZ,eAAe;IAClB,IAAI;QACA,uEAAuE;QACvE,4CAA4C;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,OAAO;QAAa;IAClE,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,SAAS;YAAO,SAAS;QAA8B,GACzD;YAAE,QAAQ;QAAI;IAEtB;AACJ","debugId":null}}]
}