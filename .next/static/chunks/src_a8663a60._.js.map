{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/image-to-pdf-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A flow for converting multiple images into a single PDF document.\n *\n * - imageToPdf - A function that handles the image to PDF conversion process.\n * - ImageToPdfInput - The input type for the function.\n * - ImageToPdfOutput - The return type for the function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\nimport {PDFDocument, PDFImage} from 'pdf-lib';\n\nconst ImageToPdfInputSchema = z.object({\n  imageDataUris: z\n    .array(z.string())\n    .describe(\n      \"An array of image files as data URIs. Each must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'\"\n    ),\n});\nexport type ImageToPdfInput = z.infer<typeof ImageToPdfInputSchema>;\n\nconst ImageToPdfOutputSchema = z.object({\n  pdfDataUri: z\n    .string()\n    .describe('The generated PDF file as a data URI.'),\n});\nexport type ImageToPdfOutput = z.infer<typeof ImageToPdfOutputSchema>;\n\nexport async function imageToPdf(\n  input: ImageToPdfInput\n): Promise<ImageToPdfOutput> {\n  return imageToPdfFlow(input);\n}\n\nconst imageToPdfFlow = ai.defineFlow(\n  {\n    name: 'imageToPdfFlow',\n    inputSchema: ImageToPdfInputSchema,\n    outputSchema: ImageToPdfOutputSchema,\n  },\n  async ({imageDataUris}) => {\n    if (imageDataUris.length === 0) {\n      throw new Error('No image files provided to convert.');\n    }\n\n    const pdfDoc = await PDFDocument.create();\n\n    for (const dataUri of imageDataUris) {\n        const imageBytes = Buffer.from(dataUri.split(',')[1], 'base64');\n        let pdfImage: PDFImage;\n\n        if (dataUri.startsWith('data:image/jpeg') || dataUri.startsWith('data:image/jpg')) {\n            pdfImage = await pdfDoc.embedJpg(imageBytes);\n        } else if (dataUri.startsWith('data:image/png')) {\n            pdfImage = await pdfDoc.embedPng(imageBytes);\n        } else {\n            // Skip unsupported image formats for now. \n            // In a real app, you might want to handle this more gracefully.\n            console.warn(`Skipping unsupported image type for data URI: ${dataUri.substring(0, 30)}...`);\n            continue;\n        }\n\n        const page = pdfDoc.addPage([pdfImage.width, pdfImage.height]);\n        page.drawImage(pdfImage, {\n            x: 0,\n            y: 0,\n            width: pdfImage.width,\n            height: pdfImage.height,\n        });\n    }\n\n    const pdfBytes = await pdfDoc.save();\n    const pdfBase64 = Buffer.from(pdfBytes).toString('base64');\n\n    return {\n      pdfDataUri: `data:application/pdf;base64,${pdfBase64}`,\n    };\n  }\n);\n"],"names":[],"mappings":";;;;;;IA8BsB,aAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/features/image-to-pdf/components/image-to-pdf-page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport { useState, useMemo, useContext, useRef } from 'react';\nimport { Loader2, FileUp, X, Image as ImageIcon, Download, ImagePlus } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { Card } from '@/components/ui/card';\nimport { allTranslations } from '@/lib/translations';\nimport { LanguageContext } from '@/contexts/language-context';\nimport { cn } from '@/lib/utils';\nimport { imageToPdf } from '@/ai/flows/image-to-pdf-flow';\nimport Image from 'next/image';\n\nconst blobToBase64 = (blob: Blob): Promise<string> => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n        if (typeof reader.result === 'string') {\n            resolve(reader.result);\n        } else {\n            reject(new Error('Failed to convert blob to Base64.'));\n        }\n        };\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n    });\n};\n\nexport function ImageToPdfPage() {\n  const [files, setFiles] = useState<File[]>([]);\n  const [isConverting, setIsConverting] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const langContext = useContext(LanguageContext);\n  if (!langContext) {\n    throw new Error('ImageToPdfPage must be used within a LanguageProvider');\n  }\n  const { language } = langContext;\n  const t = useMemo(() => allTranslations[language], [language]);\n  \n  const handleFileSelect = (selectedFiles: FileList | null) => {\n    if (!selectedFiles) return;\n    const newFiles = Array.from(selectedFiles).filter(file => file.type.startsWith('image/'));\n    if (newFiles.length !== selectedFiles.length) {\n        toast({\n            title: t.invalidFileType,\n            description: t.selectImageFile,\n            variant: \"destructive\",\n        });\n    }\n    setFiles(prev => [...prev, ...newFiles]);\n  };\n  \n  const handleRemoveFile = (index: number) => {\n    setFiles(prev => prev.filter((_, i) => i !== index));\n  };\n  \n  const handleConvert = async () => {\n    if (files.length === 0) {\n        toast({\n            title: t.conversionError,\n            description: t.conversionErrorDescription,\n            variant: \"destructive\",\n        });\n        return;\n    }\n    \n    setIsConverting(true);\n    try {\n        const fileUris = await Promise.all(files.map(file => blobToBase64(file)));\n        const { pdfDataUri } = await imageToPdf({ imageDataUris: fileUris });\n\n        const byteCharacters = atob(pdfDataUri.split(',')[1]);\n        const byteNumbers = new Array(byteCharacters.length);\n        for (let i = 0; i < byteCharacters.length; i++) {\n            byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n        const byteArray = new Uint8Array(byteNumbers);\n        const blob = new Blob([byteArray], {type: 'application/pdf'});\n        \n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = 'converted.pdf';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n\n        setFiles([]);\n\n    } catch(e: any) {\n        toast({\n            title: t.conversionError,\n            description: e.message || 'An unknown error occurred.',\n            variant: 'destructive',\n        });\n    } finally {\n        setIsConverting(false);\n    }\n  };\n\n  const handleDragEvents = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {\n    handleDragEvents(e);\n    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {\n        setIsDragging(true);\n    }\n  };\n\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n    handleDragEvents(e);\n    setIsDragging(false);\n  };\n  \n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    handleDragEvents(e);\n    setIsDragging(false);\n    handleFileSelect(e.dataTransfer.files);\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-background text-foreground\">\n        <main \n            className=\"flex-grow p-4 md:p-6 grid grid-cols-1 gap-6 relative\"\n            onDragEnter={handleDragEnter}\n            onDragOver={handleDragEvents}\n            onDragLeave={handleDragLeave}\n            onDrop={handleDrop}\n            style={{minHeight: files.length === 0 ? '80vh' : 'auto' }}\n        >\n            <Card \n                className={cn(\n                    \"flex flex-col items-center justify-center text-center rounded-2xl border-2 border-border bg-card h-full transition-colors p-6\",\n                    isDragging && \"border-primary bg-primary/10\",\n                    files.length > 0 && \"items-start justify-start\"\n                )}\n            >\n                {files.length === 0 ? (\n                    <div className=\"flex flex-col items-center justify-center h-full w-full cursor-pointer\" onClick={() => fileInputRef.current?.click()}>\n                        <FileUp className=\"w-16 h-16 text-muted-foreground/30 mb-4\"/>\n                        <h3 className=\"text-xl font-semibold\">{t.imageToPdfTitle}</h3>\n                        <p className=\"text-muted-foreground mt-2\">{t.dropImages}</p>\n                    </div>\n                ) : (\n                    <div className=\"w-full h-full flex flex-col\">\n                        <h3 className=\"text-xl font-semibold text-left mb-4\">{t.imagesToConvert}</h3>\n                        <div className=\"flex-grow grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 overflow-y-auto pr-2\">\n                           {files.map((file, index) => (\n                               <div key={index} className=\"relative aspect-square group\">\n                                   <Image \n                                        src={URL.createObjectURL(file)} \n                                        alt={`Preview ${index}`} \n                                        layout=\"fill\"\n                                        objectFit=\"cover\"\n                                        className=\"rounded-md\"\n                                   />\n                                   <div className=\"absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 flex items-center justify-center transition-opacity\">\n                                    <Button variant=\"destructive\" size=\"icon\" onClick={() => handleRemoveFile(index)}>\n                                           <X className=\"w-5 h-5\"/>\n                                       </Button>\n                                   </div>\n                               </div>\n                           ))}\n                           <button\n                                onClick={() => fileInputRef.current?.click()}\n                                className=\"flex flex-col items-center justify-center aspect-square border-2 border-dashed rounded-md text-muted-foreground hover:bg-muted/50 hover:border-primary transition-colors\"\n                            >\n                                <ImagePlus className=\"w-8 h-8 mb-2\" />\n                                <span>{t.addMoreImages}</span>\n                            </button>\n                        </div>\n                    </div>\n                )}\n            </Card>\n\n            <input\n                type=\"file\"\n                ref={fileInputRef}\n                onChange={(e) => handleFileSelect(e.target.files)}\n                className=\"hidden\"\n                accept=\"image/*\"\n                multiple\n            />\n        </main>\n        \n        <footer className=\"flex-shrink-0 flex items-center justify-center gap-2 p-4 border-t bg-background\">\n            <div className=\"w-full max-w-lg flex gap-2 items-center\">\n                <Button \n                    onClick={handleConvert}\n                    size=\"lg\"\n                    className=\"flex-1 rounded-full h-12 px-8 bg-accent text-accent-foreground hover:bg-accent/90\"\n                    disabled={isConverting || files.length === 0}\n                >\n                    {isConverting ? (\n                        <Loader2 className=\"animate-spin\" />\n                    ) : (\n                        <ImageIcon className=\"h-5 w-5\" />\n                    )}\n                    <span className=\"ml-2 sm:inline font-bold\">{t.convertAndDownload}</span>\n                </Button>\n            </div>\n        </footer>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 504, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/image-to-pdf/page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport { ImageToPdfPage } from '@/features/image-to-pdf/components/image-to-pdf-page';\nimport { FeaturePageLayout } from '@/layouts/feature-page-layout';\n\nexport default function ImageToPdf() {\n  return (\n      <FeaturePageLayout title=\"Image to PDF\" showModelSelector={false}>\n        <ImageToPdfPage />\n      </FeaturePageLayout>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AAHA;;;;AAKe,SAAS;IACtB,qBACI,6LAAC,+IAAA,CAAA,oBAAiB;QAAC,OAAM;QAAe,mBAAmB;kBACzD,cAAA,6LAAC,qLAAA,CAAA,iBAAc;;;;;;;;;;AAGvB;KANwB","debugId":null}}]
}