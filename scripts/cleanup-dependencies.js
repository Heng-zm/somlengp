#!/usr/bin/env node

/**\n * Script to remove unused dependencies identified by depcheck\n * This helps reduce bundle size and improve build performance\n */\n\nconst { execSync } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\n\nconst UNUSED_DEPENDENCIES = [\n  '@genkit-ai/firebase',\n  '@genkit-ai/next', \n  '@hookform/resolvers',\n  '@opentelemetry/exporter-jaeger',\n  '@opentelemetry/winston-transport',\n  'critters',\n  'lodash.isequal',\n  'next-auth',\n  'patch-package'\n];\n\nconst UNUSED_DEV_DEPENDENCIES = [\n  '@axe-core/react',\n  '@types/jest',\n  '@types/lodash.isequal',\n  'jest-environment-jsdom',\n  'postcss',\n  'puppeteer'\n];\n\nconst MISSING_DEPENDENCIES = [\n  '@eslint/js',\n  '@typescript-eslint/eslint-plugin',\n  '@typescript-eslint/parser',\n  'eslint-plugin-react',\n  'eslint-plugin-react-hooks',\n  '@next/eslint-plugin-next'\n];\n\nfunction removeDependencies() {\n  console.log('üßπ Starting dependency cleanup...');\n  \n  // Read current package.json\n  const packageJsonPath = path.join(process.cwd(), 'package.json');\n  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n  \n  let removedCount = 0;\n  \n  // Remove unused regular dependencies\n  console.log('\\nüì¶ Removing unused dependencies:');\n  UNUSED_DEPENDENCIES.forEach(dep => {\n    if (packageJson.dependencies && packageJson.dependencies[dep]) {\n      console.log(`  ‚ùå ${dep}`);\n      delete packageJson.dependencies[dep];\n      removedCount++;\n    }\n  });\n  \n  // Remove unused dev dependencies\n  console.log('\\nüõ†Ô∏è  Removing unused dev dependencies:');\n  UNUSED_DEV_DEPENDENCIES.forEach(dep => {\n    if (packageJson.devDependencies && packageJson.devDependencies[dep]) {\n      console.log(`  ‚ùå ${dep}`);\n      delete packageJson.devDependencies[dep];\n      removedCount++;\n    }\n  });\n  \n  // Write updated package.json\n  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2) + '\\n');\n  \n  console.log(`\\n‚úÖ Removed ${removedCount} unused dependencies`);\n  \n  // Install missing dependencies\n  console.log('\\nüì• Installing missing dependencies...');\n  try {\n    const missingDeps = MISSING_DEPENDENCIES.join(' ');\n    execSync(`npm install -D ${missingDeps}`, { stdio: 'inherit' });\n    console.log('‚úÖ Installed missing dependencies');\n  } catch (error) {\n    console.error('‚ùå Failed to install missing dependencies:', error.message);\n  }\n  \n  console.log('\\nüéâ Dependency cleanup completed!');\n  console.log('\\nüí° Next steps:');\n  console.log('  1. Run: npm run build');\n  console.log('  2. Test your application');\n  console.log('  3. Commit the changes');\n}\n\nfunction analyzeBundleImpact() {\n  console.log('\\nüìä Analyzing bundle size impact...');\n  \n  try {\n    // Run a quick build to see the impact\n    console.log('Building to check bundle size...');\n    execSync('npm run build', { stdio: 'pipe' });\n    \n    // Read build output\n    const buildOutput = execSync('npm run build 2>&1', { encoding: 'utf8' });\n    const bundleSizeMatch = buildOutput.match(/First Load JS shared by all\\s+([\\d.]+\\s*[A-Z]*B)/i);\n    \n    if (bundleSizeMatch) {\n      console.log(`üì¶ Current bundle size: ${bundleSizeMatch[1]}`);\n    }\n  } catch (error) {\n    console.log('‚ö†Ô∏è  Could not analyze bundle impact automatically');\n  }\n}\n\nfunction generateOptimizationReport() {\n  const report = {\n    timestamp: new Date().toISOString(),\n    removedDependencies: [...UNUSED_DEPENDENCIES, ...UNUSED_DEV_DEPENDENCIES],\n    addedDependencies: MISSING_DEPENDENCIES,\n    recommendations: [\n      'Consider using dynamic imports for heavy components',\n      'Implement code splitting for large pages',\n      'Use Next.js Image component for all images',\n      'Enable compression in production',\n      'Consider implementing a service worker for caching'\n    ]\n  };\n  \n  fs.writeFileSync(\n    path.join(process.cwd(), 'optimization-report.json'), \n    JSON.stringify(report, null, 2)\n  );\n  \n  console.log('\\nüìÑ Generated optimization-report.json');\n}\n\nif (require.main === module) {\n  removeDependencies();\n  generateOptimizationReport();\n  analyzeBundleImpact();\n}